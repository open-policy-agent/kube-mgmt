apiVersion: v1
kind: ServiceAccount
metadata:
  name: opa-sa
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: opa-rolebinding
subjects:
- kind: ServiceAccount
  name: opa-sa
  namespace: opa
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: opa
spec:
  selector:
    app: opa
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 443
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: opa
  name: opa
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: opa
      name: opa
    spec:
      serviceAccountName: opa-sa
      containers:
        - name: opa
          image: openpolicyagent/opa:0.8.0
          args:
            - "run"
            - "--server"
            - "--tls-cert-file=/certs/tls.crt"
            - "--tls-private-key-file=/certs/tls.key"
            - "--addr=0.0.0.0:443"
            - "--insecure-addr=127.0.0.1:8181"
          volumeMounts:
            - readOnly: true
              mountPath: /certs
              name: opa-server
        - name: kube-mgmt
          image: openpolicyagent/kube-mgmt:0.8
      volumes:
        - name: opa-server
          secret:
            secretName: opa-server
---
kind: ValidatingWebhookConfiguration
apiVersion: admissionregistration.k8s.io/v1beta1
metadata:
  name: opa-validating-webhook
webhooks:
  - name: validating-webhook.openpolicyagent.org
    rules:
      - operations: ["CREATE"]
        apiGroups: ["*"]
        apiVersions: ["v1"]
        resources: ["services"]
    clientConfig:
      caBundle: REPLACE_WITH_SECRET
      service:
        namespace: opa
        name: opa
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: service-check
data:
  main: |
    package kubernetes.admission

    import data.kubernetes.namespaces

    deny[msg] {
        input.request.kind.kind = "Service"
        input.request.operation = "CREATE"
        servicetype = input.request.object.spec.type
        contains(servicetype, "LoadBalancer")
        not input.request.object.spec.loadBalancerSourceRanges
        msg = sprintf("Rejecting service of type %q without specifying spec.loadBalancerSourceRanges", [servicetype])
    }
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: opa-default-system-main
data:
  main: |
    package system

    import data.kubernetes.admission

    main = {
      "apiVersion": "admission.k8s.io/v1beta1",
      "kind": "AdmissionReview",
      "response": response,
    }

    default response = {"allowed": true}

    response = {
        "allowed": false,
        "status": {
            "reason": reason,
        },
    } {
        reason = concat(", ", admission.deny)
        reason != ""
    }

